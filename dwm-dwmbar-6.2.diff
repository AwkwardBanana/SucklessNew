diff -up ../dmenu/dwm/config.def.h ./config.def.h
--- ../dmenu/dwm/config.def.h	2020-06-03 02:35:51.620803966 +0100
+++ ./config.def.h	2020-06-03 02:19:00.475230749 +0100
@@ -18,6 +18,125 @@ static const char *colors[][3]      = {
 	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
 };
 
+typedef enum
+{
+    CENTER,
+    RIGHT,
+    LEFT,
+}HoriAlignment;
+
+typedef enum
+{
+    TOP,
+    BOTTOM,
+}VertAlignment;
+
+typedef enum
+{
+    TagsAllElem,
+    TagsCurrentElem,
+    LayoutCurrentElem,
+    LayoutAllElem,
+    TitleElem,
+    StatusElem,
+    SeperatorElem,
+}ElementType;
+
+typedef struct
+{
+    HoriAlignment align;
+    ElementType type;
+    unsigned int intData[10];
+    const char *strData;
+    unsigned int xpos;
+    unsigned int w;
+}BarElement;
+
+//TODO: create a function to toggle this
+//and allow the bar length formatted
+//eg make char * variable
+//and int variable
+//lets say char * variable is "w" and int is 2
+//this means the status bar will disaplay 2 words max
+//TODO: FORMAT OPTIONS:
+//w : defines number of words to display
+//+: defines max length of title bar in px
+//-: defines min length of title bar in px
+//f: defines whether the bar is fixed length
+//F: fixed length but if 'w' is also specified then it will display
+//c: defines number of characters
+
+
+static const unsigned int titlemaxwidth = 250;  // this sets the max width of title bar
+                                                                                        //make these the same for fixed width
+static const unsigned int titleminwidth = 150; // this sets minimum width of title bar
+static const unsigned int titlewidthfittext = 0; //this makes it so the width of the title bar fits the text with respect to max length of bar
+
+static const unsigned int titleintform = 6;  // this is the max number of words the title bar can display (max length over rides this)
+static const char titleFormat[] = "w"; // IGNORE THIS, this isnt implemented fully yet
+
+// keybinding is available for this, to toggle it. function is called togglealttitle
+static unsigned int titlestatus = 0;  //  PUT STATUS Text on title bar, this is functional but i haven't tested it in all cases
+
+HoriAlignment tagIndHAlign = CENTER;  //the tagindicators horizontal alignment: see above for options
+VertAlignment tagIndVAlign = TOP; //the tagindicators vertical alignment: see above for options
+
+/* the tag indicators are centered in the element by default */
+static const unsigned int tagindicatornormwidth = 3;
+static const unsigned int tagindicatorselwidth = 100;
+static const unsigned int tagindicatorheight = 3;
+static const unsigned int statuspadpx = 8;   // this gives padding to the status text
+
+/*Structuring the Elements and available types
+ *
+ * All elements have the same first 4 int data
+ *
+ * first: inverse colorscheme, 1 to enable 0 to disable
+ * second: perminantly select the element (background will always be selected bg), 1 to enable 0 to disable
+ * third: switch the normal color scheme with selected color scheme, 1 to enable 0 to disbale
+ * fourth: isnt implemented yet leave as 0
+ *
+ * some element have specific int datas
+ * 
+ * Displays all tags (like default)
+ * TagsAllElem,
+ *
+ * Displays all active tags only or tags with program 
+ * TagsCurrentElem,
+ *
+ * Displays only current layout (like default)
+ * LayoutCurrentElem,
+ *
+ * Displays all layouts 
+ * LayoutAllElem,     fifth: should the current layout be displayed first in the list of layouts
+ *
+ * Displays title of focused window
+ * TitleElem,         fifth: if this element is last, fill the remaining bar, 1 to enable, 0 to disable
+ *
+ * Displays status
+ * StatusElem,
+ *
+ * Displays some text which is specified with strData, can be used as seperator
+ * SeperatorElem,
+ *
+ */
+static BarElement barOrder[] = 
+{
+    // IMPORTANT NOTE: only the last element can have RIGHT as the alignment
+    // i havent finished implementing the alignment feature yet but it works for the last item
+    // also see BarElement struct above.
+    //
+    //make sure to fill EVERY int data with 1 or 0, not filling some in will cause weird things
+//  ALIGNMENT,  ELEMENTTYPE, INTDATA, STRDATA // SEE ABOVE FOR MORE INFO
+    {LEFT, TitleElem,       .intData = {0, 1, 0, 0, 0}, .strData = "" }, //you dont have to put .intData or .strData but it helps for clarity
+    {LEFT, TagsCurrentElem, .intData = {0 , 1, 0, 0},   .strData = "" }, //also some elements dont use strData so leave it empty
+    {LEFT, SeperatorElem,   .intData = {0, 1, 0, 0},    .strData = "::" },
+    {LEFT, LayoutAllElem,   .intData = {0, 0, 0, 0, 1}, .strData = "" },
+    //{RIGHT, StatusElem, {0,0,0}},
+};
+static const unsigned int fontborder = 6;   // this gives the font some padding, useful if induicators overlap text
+
+
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
 
@@ -84,6 +203,7 @@ static Key keys[] = {
 	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+    { MODKEY,                       XK_s,      togglealttitle, {0} }, // toggle status text but on title
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
diff -up ../dmenu/dwm/dwm.c ./dwm.c
--- ../dmenu/dwm/dwm.c	2020-06-03 02:35:51.624137439 +0100
+++ ./dwm.c	2020-06-03 02:35:38.506922033 +0100
@@ -210,6 +210,7 @@ static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
 static void tile(Monitor *);
+static void togglealttitle();
 static void togglebar(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void toggletag(const Arg *arg);
@@ -264,6 +265,7 @@ static Atom wmatom[WMLast], netatom[NetL
 static int running = 1;
 static Cur *cursor[CurLast];
 static Clr **scheme;
+static Clr **inversescheme;
 static Display *dpy;
 static Drw *drw;
 static Monitor *mons, *selmon;
@@ -272,6 +274,32 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+unsigned int countSetBits(unsigned int n)
+{
+    unsigned int count = 0;
+    while(n)
+    {
+        count+=n&1;
+        n>>=1;
+    }
+    return count;
+}
+
+BarElement
+getbarelement(ElementType et)
+{
+    for(int i = 0; i < LENGTH(barOrder); i++)
+    {
+        if(et == barOrder[i].type)
+            return barOrder[i];
+    }
+
+    BarElement empty = {-1,-1};
+    return empty;
+}
+
+char texts[256];
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -432,17 +460,36 @@ buttonpress(XEvent *e)
 	}
 	if (ev->window == selmon->barwin) {
 		i = x = 0;
+        BarElement tagElem = getbarelement(TagsAllElem);
+        if(tagElem.type == -1)
+            tagElem = getbarelement(TagsCurrentElem);
+
+        BarElement layoutElem = getbarelement(LayoutAllElem);
+        if(layoutElem.type == -1)
+            layoutElem = getbarelement(LayoutCurrentElem);
+
+        BarElement statusElem = getbarelement(StatusElem);
+        BarElement titleElem = getbarelement(TitleElem);
+        x = tagElem.xpos;
+        int y = layoutElem.xpos;
+        int j = 0;
 		do
 			x += TEXTW(tags[i]);
 		while (ev->x >= x && ++i < LENGTH(tags));
-		if (i < LENGTH(tags)) {
+
+        do
+            y += TEXTW(layouts[j].symbol);
+        while (ev->x >= y && ++j < LENGTH(layouts));
+		if (i < LENGTH(tags) && (ev->x >= tagElem.xpos) && (ev->x <= (tagElem.xpos + tagElem.w)) && tagElem.type != -1) {
 			click = ClkTagBar;
-			arg.ui = 1 << i;
-		} else if (ev->x < x + blw)
+			arg.ui =  1 << i;
+		} else if (ev->x >= layoutElem.xpos && ev->x <= (layoutElem.xpos + layoutElem.w) && layoutElem.type != -1) {
 			click = ClkLtSymbol;
-		else if (ev->x > selmon->ww - TEXTW(stext))
+            arg.v = (strcmp(m->ltsymbol,layouts[j].symbol)==0) ? ((j==0) ? &layouts[j+1] : &layouts[j-1]) : &layouts[j];
+        }
+		else if (ev->x >= statusElem.xpos && ev->x <= (statusElem.xpos + statusElem.w) && statusElem.type != -1)
 			click = ClkStatusText;
-		else
+		else if( ev->x >= titleElem.xpos && ev->x <= (titleElem.xpos + titleElem.w) && titleElem.type != -1)
 			click = ClkWinTitle;
 	} else if ((c = wintoclient(ev->window))) {
 		focus(c);
@@ -453,7 +500,7 @@ buttonpress(XEvent *e)
 	for (i = 0; i < LENGTH(buttons); i++)
 		if (click == buttons[i].click && buttons[i].func && buttons[i].button == ev->button
 		&& CLEANMASK(buttons[i].mask) == CLEANMASK(ev->state))
-			buttons[i].func(click == ClkTagBar && buttons[i].arg.i == 0 ? &arg : &buttons[i].arg);
+			buttons[i].func((click == ClkTagBar || click == ClkLtSymbol) && buttons[i].arg.i == 0 ? &arg : &buttons[i].arg);
 }
 
 void
@@ -486,7 +533,10 @@ cleanup(void)
 	for (i = 0; i < CurLast; i++)
 		drw_cur_free(drw, cursor[i]);
 	for (i = 0; i < LENGTH(colors); i++)
+    {
 		free(scheme[i]);
+        free(inversescheme[i]);
+    }
 	XDestroyWindow(dpy, wmcheckwin);
 	drw_free(drw);
 	XSync(dpy, False);
@@ -696,51 +746,383 @@ dirtomon(int dir)
 void
 drawbar(Monitor *m)
 {
-	int x, w, tw = 0;
+	int x, w, sw = 0;
+    x = 0;
 	int boxs = drw->fonts->h / 9;
 	int boxw = drw->fonts->h / 6 + 2;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
-	/* draw status first so it can be overdrawn by tags later */
-	if (m == selmon) { /* status is only drawn on selected monitor */
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		tw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
-	}
-
-	for (c = m->clients; c; c = c->next) {
-		occ |= c->tags;
-		if (c->isurgent)
-			urg |= c->tags;
-	}
-	x = 0;
-	for (i = 0; i < LENGTH(tags); i++) {
-		w = TEXTW(tags[i]);
-		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
-		if (occ & 1 << i)
-			drw_rect(drw, x + boxs, boxs, boxw, boxw,
-				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-				urg & 1 << i);
-		x += w;
-	}
-	w = blw = TEXTW(m->ltsymbol);
-	drw_setscheme(drw, scheme[SchemeNorm]);
-	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
-
-	if ((w = m->ww - tw - x) > bh) {
-		if (m->sel) {
-			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
-			if (m->sel->isfloating)
-				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
-		} else {
-			drw_setscheme(drw, scheme[SchemeNorm]);
-			drw_rect(drw, x, 0, w, bh, 1, 1);
-		}
-	}
-	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
+    int nw, nch;
+    nw=nch=0;
+    if(m->sel)
+    { 
+        for(nch = 1; nch < LENGTH(m->sel->name); nch++)
+        {
+            if(nw >= titleintform)
+                break;
+            if(m->sel->name[nch] == ' ' && m->sel->name[nch-1] != ' ')
+                nw+=1;
+        }
+        strncpy(texts, m->sel->name, nch);
+        texts[nch]='\0';
+    }
+    else
+        texts[0] = '\0';
+
+    BarElement currElem;
+    Clr **elemScheme;
+    unsigned int alwaysSelScheme = 0; 
+    unsigned int switchSelNorm = 0;
+    int currElemIndex = 0;
+    int lastElemIndex = LENGTH(barOrder)-1;
+    while(currElemIndex <= lastElemIndex)
+    {
+        currElem = barOrder[currElemIndex];
+        
+        elemScheme = (currElem.intData[0]) ? inversescheme : scheme;
+        alwaysSelScheme = (currElem.intData[1]);
+        switchSelNorm = (currElem.intData[2]);
+
+        
+        for (c = m->clients; c; c = c->next) {
+            occ |= c->tags;
+            if (c->isurgent)
+                urg |= c->tags;
+        }
+        switch(currElem.type)
+        {
+            
+            case StatusElem:
+            {
+                /* draw status first so it can be overdrawn by tags later */
+                if (m == selmon) //status bar is only drawn on selected monitor
+                {
+                    sw = TEXTW(stext) - statuspadpx;
+                    if((currElemIndex == lastElemIndex) && (currElem.align  == RIGHT))
+                    {
+                        drw_setscheme(drw, scheme[SchemeNorm]);
+                        drw_rect(drw, x, 0, m->ww -x-sw,bh,1,1);
+
+                        x = m->ww - sw;
+                    }
+                    else if(currElemIndex == lastElemIndex)
+                    {
+                        sw = TEXTW(stext) - lrpad + statuspadpx + (m->ww-x); 
+                    }
+                    
+                    barOrder[currElemIndex].xpos = x;
+                    if(!switchSelNorm)
+                        drw_setscheme(drw, elemScheme[(alwaysSelScheme) ? SchemeSel : SchemeNorm]);
+                    else
+                        drw_setscheme(drw, elemScheme[(alwaysSelScheme) ? SchemeNorm : SchemeSel]);
+
+                    drw_text(drw, x, 0, sw, bh, statuspadpx, stext, 0);
+
+                    x += ((currElem.align != RIGHT) ? sw : 0);
+
+                    barOrder[currElemIndex].w = sw;
+                }
+                break;
+            }
+            case TagsAllElem:
+            {
+                int nt = LENGTH(tags); 
+
+                int sum = 0;
+                for(int i = 0; i < nt; i++)
+                    sum += TEXTW(tags[i]);
+                
+                barOrder[currElemIndex].w = sum;
+                
+                if((currElemIndex == lastElemIndex) && (currElem.align == RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x-sum, bh, 1, 1);
+
+                    x = m->ww - sum;
+                }
+
+                barOrder[currElemIndex].xpos = x;
+                
+                for (i = 0; i < nt; i++) 
+                {
+                    w = TEXTW(tags[i]);
+                    if(!switchSelNorm)
+                        drw_setscheme(drw, elemScheme[((m->tagset[m->seltags] & 1 << i) || alwaysSelScheme) ? SchemeSel : SchemeNorm]);
+                    else
+                        drw_setscheme(drw, elemScheme[((m->tagset[m->seltags] & 1 << i) || alwaysSelScheme) ? SchemeNorm : SchemeSel]);
+
+                    drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
+                    if (occ & 1 << i)
+                    {
+                        int iw = m->tagset[m->seltags] & 1 << i ? tagindicatorselwidth: tagindicatornormwidth;
+                        iw = (iw > w) ? w : iw;
+                        int indX = (tagIndHAlign == CENTER) ? x + w/2 - iw/2 : ((tagIndHAlign == RIGHT) ? x + w - iw : x);
+                        int indY = (tagIndVAlign == TOP) ? 0 : bh - tagindicatorheight;
+                        drw_rect(drw, indX , indY, iw, tagindicatorheight,
+                            m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
+                            urg && 1 << 1);
+                    }
+                    x += w;
+                }
+                if(currElemIndex == lastElemIndex && (currElem.align != RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x, bh, 1, 1);
+                }
+                break;
+            }
+            case TagsCurrentElem:
+            {
+                int nt = LENGTH(tags); 
+
+                int sum = 0;
+                for(int i = 0; i < countSetBits(m->tagset[m->seltags]); i++)
+                    sum += TEXTW(tags[i]);
+                
+                barOrder[currElemIndex].w = sum; 
+                if((currElemIndex == lastElemIndex) && (currElem.align == RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x-sum, bh, 1, 1);
+
+                    x = m->ww - sum;
+                }
+
+                barOrder[currElemIndex].xpos=x;
+
+                for (i = 0; i < nt; i++) 
+                {
+                    if((m->tagset[m->seltags] & 1<<i) || (occ & 1 << i) )
+                    {
+                        w = TEXTW(tags[i]);
+                        if(!switchSelNorm)
+                            drw_setscheme(drw, elemScheme[((m->tagset[m->seltags] & 1 << i) || (alwaysSelScheme)) ? SchemeSel : SchemeNorm]);
+                        else
+                            drw_setscheme(drw, elemScheme[((m->tagset[m->seltags] & 1 << i) || (alwaysSelScheme)) ? SchemeNorm : SchemeSel]);
+
+                        drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
+                        if (occ & 1 << i)
+                        {
+                            int iw = m->tagset[m->seltags] & 1 << i ? tagindicatorselwidth: tagindicatornormwidth;
+                            iw = (iw > w) ? w : iw;
+                            int indX = (tagIndHAlign == CENTER) ? x + w/2 - iw/2 : ((tagIndHAlign == RIGHT) ? x + w - iw : x);
+                            int indY = (tagIndVAlign == TOP) ? 0 : bh - tagindicatorheight;
+                            drw_rect(drw, indX , indY, iw, tagindicatorheight,
+                                m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
+                                urg && 1 << 1);
+                        }
+                        x += w;
+                    }
+                }
+                if(currElemIndex == lastElemIndex && (currElem.align != RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x, bh, 1, 1);
+                }
+                break;
+            }
+            case LayoutCurrentElem:
+            {
+                w = blw = TEXTW(m->ltsymbol);
+                
+                barOrder[currElemIndex].w = w;
+                if(currElemIndex == lastElemIndex && (currElem.align == RIGHT))
+                {
+                    drw_setscheme(drw, scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x-w, bh, 1, 1);
+                    x = m->ww - w;
+                }
+                barOrder[currElemIndex].xpos= x;
+
+                if(!switchSelNorm)
+                    drw_setscheme(drw, elemScheme[(alwaysSelScheme) ? SchemeSel : SchemeNorm]);
+                else
+                    drw_setscheme(drw, elemScheme[(alwaysSelScheme) ? SchemeNorm : SchemeSel]);
+
+                drw_text(drw, x, 0, w, bh, lrpad / 2,m->ltsymbol, 0);
+                x+=w;
+                if(currElemIndex == lastElemIndex && (currElem.align != RIGHT))
+                {
+                    drw_setscheme(drw, scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x, bh, 1, 1);
+                }
+
+                break;
+            }
+            case LayoutAllElem:
+            {
+                unsigned int clfront = currElem.intData[4];
+                int nl = LENGTH(layouts);
+                int clw = blw = TEXTW(m->ltsymbol);
+               
+                int sum = 0;
+                for(int i = 0; i < nl; i++)
+                    sum += TEXTW(layouts[i].symbol);
+                
+
+                barOrder[currElemIndex].xpos = x;
+                barOrder[currElemIndex].w = sum;
+               
+               if((currElemIndex == lastElemIndex) && (currElem.align == RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x-sum, bh, 1, 1);
+
+                    x = m->ww - sum;
+                    barOrder[currElemIndex].xpos = x;
+                }
+                if(clfront)
+                {
+                    int iw = tagindicatorselwidth;
+                    iw = (iw > clw) ? clw : iw;
+                    if(!switchSelNorm)
+                        drw_setscheme(drw, elemScheme[SchemeSel]);
+                    else
+                        drw_setscheme(drw, elemScheme[SchemeNorm]);
+
+                    drw_text(drw, x, 0, clw, bh, lrpad / 2, m->ltsymbol, 0);
+                    int indX = (tagIndHAlign == CENTER) ? x + clw/2 - iw/2 : ((tagIndHAlign == RIGHT) ? x + clw - iw : x);
+                    int indY = (tagIndVAlign == TOP) ? 0 : bh - tagindicatorheight;
+                    drw_rect(drw, indX, indY, iw,tagindicatorheight,1,0);
+                    x+=clw; 
+
+                    nl = nl - 1;
+                } 
+                
+                
+            
+                for (int i = 0; i < ((clfront) ? (nl+1) : nl); i++)
+                {
+                    w = TEXTW(layouts[i].symbol);
+                    if(clfront && (!strcmp(m->ltsymbol,layouts[i].symbol)))
+                        continue;
+                    int iw = (!strcmp(m->ltsymbol,layouts[i].symbol)) ? tagindicatorselwidth : 0;
+                    iw = (iw > w) ? w : iw;
+                    
+                    if(!switchSelNorm)
+                        drw_setscheme(drw, elemScheme[(!strcmp(m->ltsymbol,layouts[i].symbol) || alwaysSelScheme) ? SchemeSel : SchemeNorm ]);
+                    else
+                        drw_setscheme(drw, elemScheme[(!strcmp(m->ltsymbol,layouts[i].symbol) || alwaysSelScheme) ? SchemeNorm : SchemeSel ]);
+
+                    drw_text(drw, x, 0, w, bh, lrpad / 2, layouts[i].symbol, 0);
+                    int indX = (tagIndHAlign == CENTER) ? x + w/2 - iw/2 : ((tagIndHAlign == RIGHT) ? x + w - iw : x);
+                    int indY = (tagIndVAlign == TOP) ? 0 : bh - tagindicatorheight;
+                    drw_rect(drw, indX, indY, iw,tagindicatorheight,1,0);
+                    x+=w;
+                }
+                if(currElemIndex == lastElemIndex && (currElem.align != RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x, bh, 1, 1);
+                }
+                break;
+            }
+            case TitleElem:
+            {
+                drw_setscheme(drw,scheme[SchemeNorm]);
+                
+                unsigned int fill = currElem.intData[4];
+
+                w = (!titlewidthfittext && (TEXTW(texts) < titleminwidth)) ? 
+                    titleminwidth : 
+                    ((TEXTW(texts) > titlemaxwidth) ? 
+                     titlemaxwidth : 
+                     TEXTW(texts));
+
+                //TODO:  NEATEN
+                barOrder[currElemIndex].xpos = x;
+                w = (fill) ? m->ww-x : w;
+                w = (titlestatus) ? TEXTW(stext) : w;
+
+                if(currElemIndex == lastElemIndex && (currElem.align = RIGHT))
+                {            
+                    if(!fill)
+                    {
+                        drw_setscheme(drw, scheme[SchemeNorm]);
+                        drw_rect(drw, x, 0, m->ww-x-w, bh, 1, 1);
+                    }
+
+                    x = m->ww - w;
+                    barOrder[currElemIndex].xpos = x;
+                }
+
+                else if(currElemIndex == lastElemIndex && (currElem.align != RIGHT))
+                {
+                    if(!fill)
+                    {
+                        drw_setscheme(drw, scheme[SchemeNorm]);
+                        drw_rect(drw, x, 0, m->ww-x, bh, 1, 1);
+                    }
+                }
+                
+                if (w > bh) 
+                {
+                    if (m->sel) 
+                    {
+                        if(!switchSelNorm)
+                            drw_setscheme(drw, elemScheme[((m == selmon) || alwaysSelScheme) ? SchemeSel : SchemeNorm]);
+                        else
+                            drw_setscheme(drw, elemScheme[((m == selmon) || alwaysSelScheme) ? SchemeNorm : SchemeSel]);
+                        
+                        w = (titlestatus) ? TEXTW(stext) : w;
+                        drw_text(drw, x, 0, w, bh, lrpad/2, (titlestatus) ? stext : texts , 0);
+                        if (m->sel->isfloating)
+                            drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
+                    } 
+                    else 
+                    {
+                        if(!switchSelNorm)
+                            drw_setscheme(drw, elemScheme[((m == selmon) || alwaysSelScheme) ? SchemeSel : SchemeNorm]);
+                        else
+                            drw_setscheme(drw, elemScheme[((m == selmon) || alwaysSelScheme) ? SchemeNorm : SchemeSel]);
+                        
+                        if(!titlestatus)
+                            drw_rect(drw, x, 0, w, bh, 1, 1);
+                        else
+                        {
+                            w = TEXTW(stext);
+                            drw_text(drw, x, 0, w, bh, lrpad/2, stext, 0);
+                        }
+                    }
+                    x += w;
+                }
+                barOrder[currElemIndex].w = w;
+            
+                break;
+            }
+            case SeperatorElem:
+            {
+                w = TEXTW(currElem.strData);
+                barOrder[currElemIndex].w = w;
+                if(currElemIndex == lastElemIndex && (currElem.align == RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x-w, bh, 1, 1);
+                    x = m->ww-w;
+                }
+                
+                barOrder[currElemIndex].xpos = x;
+                if(!switchSelNorm)
+                    drw_setscheme(drw, elemScheme[(alwaysSelScheme) ? SchemeSel : SchemeNorm]);
+                else
+                    drw_setscheme(drw, elemScheme[(alwaysSelScheme) ? SchemeNorm : SchemeSel]);
+                drw_text(drw, x, 0, w, bh, lrpad/2, currElem.strData, 0);
+                x+=w;
+
+                if(currElemIndex == lastElemIndex && (currElem.align != RIGHT))
+                {
+                    drw_setscheme(drw,scheme[SchemeNorm]);
+                    drw_rect(drw, x, 0, m->ww-x, bh, 1, 1);
+                }
+
+                break;
+            }
+        }
+        currElemIndex += 1;
+    }
+    drw_map(drw, m->barwin, 0, 0, m->ww, bh);
 }
 
 void
@@ -1546,7 +1928,7 @@ setup(void)
 	if (!drw_fontset_create(drw, fonts, LENGTH(fonts)))
 		die("no fonts could be loaded.");
 	lrpad = drw->fonts->h;
-	bh = drw->fonts->h + 2;
+	bh = drw->fonts->h + fontborder;
 	updategeom();
 	/* init atoms */
 	utf8string = XInternAtom(dpy, "UTF8_STRING", False);
@@ -1569,8 +1951,19 @@ setup(void)
 	cursor[CurMove] = drw_cur_create(drw, XC_fleur);
 	/* init appearance */
 	scheme = ecalloc(LENGTH(colors), sizeof(Clr *));
-	for (i = 0; i < LENGTH(colors); i++)
-		scheme[i] = drw_scm_create(drw, colors[i], 3);
+	inversescheme = ecalloc(LENGTH(colors), sizeof(Clr *));
+    for (i = 0; i < LENGTH(colors); i++)
+    {
+        const char *inversecolors[] = {
+            colors[i][1],
+            colors[i][0],
+            colors[i][2],
+        };
+
+        scheme[i] = drw_scm_create(drw, colors[i], 3);
+        inversescheme[i] = drw_scm_create(drw,inversecolors,3);
+    }
+    
 	/* init bars */
 	updatebars();
 	updatestatus();
@@ -1700,6 +2093,13 @@ tile(Monitor *m)
 }
 
 void
+togglealttitle()
+{
+    titlestatus = !titlestatus;
+    drawbar(selmon);
+}
+
+void
 togglebar(const Arg *arg)
 {
 	selmon->showbar = !selmon->showbar;
Only in .: dwm-dwmbar-6.2.diff
Common subdirectories: ../dmenu/dwm/.git and ./.git
